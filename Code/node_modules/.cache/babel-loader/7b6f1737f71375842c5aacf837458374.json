{"ast":null,"code":"import _classCallCheck from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/src/Cell/Cell.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classname from 'classnames';\nimport './Cell.css';\nexport var Cell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cell, _React$Component);\n\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cell).apply(this, arguments));\n  }\n\n  _createClass(Cell, [{\n    key: \"shouldComponentUpdate\",\n    //I can use React.PureComponent\n\n    /**\n     * Method to check if I want call render function of this component and\n     * also the render function of its children (if this components has children)\n     * @param {*} nextProps proprietà future\n     */\n    value: function shouldComponentUpdate(nextProps) {\n      /** If I will use PureComponent we have an automatic check and I\n          don't nead this function\n          Advantage of use this function = I have more control about what check \n      */\n      return this.props.mine !== nextProps.mine;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mine = this.props.mine; //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n\n      var className = classname('cell', {\n        'is-masked': mine.isMasked\n      });\n      return React.createElement(\"button\", {\n        className: className,\n        onClick: this.props.onUnmask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, mine.isMasked ? 'O' : 'X');\n    }\n    /*\n      I want that Cell is \"stupid\", I put the login in the Game because Game knows the state of all cells\n    constructor(props){\n      super(props);\n      this.state ={\n        isMasked: props.mine.isMasked\n      }\n    }\n     render(){\n      const mine = this.props.mine;\n      //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n      const className=classname('cell',{\n        'is-masked': mine.isMasked\n      })\n      return (\n        <button className={className} onClick={()=>{\n          this.setState({isMasked: false});\n        }}>\n          {this.state.isMasked ? null: 'X'}\n        </button>\n      )\n    }*/\n\n  }]);\n\n  return Cell;\n}(React.Component); // I can use propTypes in order to test the required field\n\nCell.propTypes = {\n  mine: PropTypes.shape({\n    isMasked: PropTypes.bool.isRequired\n  }).isRequired,\n  onUnmask: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/src/Cell/Cell.jsx"],"names":["React","PropTypes","classname","Cell","nextProps","props","mine","className","isMasked","onUnmask","Component","propTypes","shape","bool","isRequired","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,YAAP;AAEA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAA4C;;AAE1C;;;;;AAFF,0CAOwBC,SAPxB,EAOkC;AAC9B;;;;AAIA,aAAO,KAAKC,KAAL,CAAWC,IAAX,KAAoBF,SAAS,CAACE,IAArC;AACD;AAbH;AAAA;AAAA,6BAeU;AACN,UAAMA,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB,CADM,CAEN;;AACA,UAAMC,SAAS,GAACL,SAAS,CAAC,MAAD,EAAQ;AAC/B,qBAAaI,IAAI,CAACE;AADa,OAAR,CAAzB;AAGA,aACE;AAAQ,QAAA,SAAS,EAAED,SAAnB;AAA+B,QAAA,OAAO,EACpC,KAAKF,KAAL,CAAWI,QADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGGH,IAAI,CAACE,QAAL,GAAgB,GAAhB,GAAqB,GAHxB,CADF;AAOD;AACD;;;;;;;;;;;;;;;;;;;;;;;AA7BF;;AAAA;AAAA,EAA0BR,KAAK,CAACU,SAAhC,E,CAsDA;;AACAP,IAAI,CAACQ,SAAL,GAAiB;AACfL,EAAAA,IAAI,EAAEL,SAAS,CAACW,KAAV,CAAgB;AACpBJ,IAAAA,QAAQ,EAACP,SAAS,CAACY,IAAV,CAAeC;AADJ,GAAhB,EAEHA,UAHY;AAIfL,EAAAA,QAAQ,EAAER,SAAS,CAACc,IAAV,CAAeD;AAJV,CAAjB","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classname from 'classnames'\nimport './Cell.css'\n\nexport class Cell extends React.Component { //I can use React.PureComponent\n\n  /**\n   * Method to check if I want call render function of this component and\n   * also the render function of its children (if this components has children)\n   * @param {*} nextProps proprietà future\n   */\n  shouldComponentUpdate(nextProps){\n    /** If I will use PureComponent we have an automatic check and I\n        don't nead this function\n        Advantage of use this function = I have more control about what check \n    */\n    return this.props.mine !== nextProps.mine;\n  }\n\n  render(){\n    const mine = this.props.mine;\n    //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n    const className=classname('cell',{\n      'is-masked': mine.isMasked\n    });\n    return (\n      <button className={className}  onClick={\n        this.props.onUnmask\n      }>\n        {mine.isMasked ? 'O': 'X'}\n      </button>\n    )\n  }\n  /*\n    I want that Cell is \"stupid\", I put the login in the Game because Game knows the state of all cells\n  constructor(props){\n    super(props);\n    this.state ={\n      isMasked: props.mine.isMasked\n    }\n  }\n\n  render(){\n    const mine = this.props.mine;\n    //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n    const className=classname('cell',{\n      'is-masked': mine.isMasked\n    })\n    return (\n      <button className={className} onClick={()=>{\n        this.setState({isMasked: false});\n      }}>\n        {this.state.isMasked ? null: 'X'}\n      </button>\n    )\n  }*/\n}\n\n// I can use propTypes in order to test the required field\nCell.propTypes = {\n  mine: PropTypes.shape({\n    isMasked:PropTypes.bool.isRequired,\n  }).isRequired,\n  onUnmask: PropTypes.func.isRequired,\n};"]},"metadata":{},"sourceType":"module"}