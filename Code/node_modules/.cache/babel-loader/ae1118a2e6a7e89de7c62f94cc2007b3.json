{"ast":null,"code":"import _classCallCheck from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/src/Cell/Cell.jsx\";\nimport React from 'react';\nimport classname from 'classnames';\nimport './Cell.css';\nexport var Cell =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cell, _React$Component);\n\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cell).apply(this, arguments));\n  }\n\n  _createClass(Cell, [{\n    key: \"render\",\n    value: function render() {\n      var mine = this.props.mine; //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n\n      var className = classname('cell', {\n        'is-masked': mine.isMasked\n      });\n      return React.createElement(\"button\", {\n        className: className,\n        key: this.props.mine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, mine.isMasked ? null : 'X');\n    }\n    /*\n      I want that Cell is \"stupid\", I put the login in the Game because Game knows the state of all cells\n    constructor(props){\n      super(props);\n      this.state ={\n        isMasked: props.mine.isMasked\n      }\n    }\n     render(){\n      const mine = this.props.mine;\n      //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n      const className=classname('cell',{\n        'is-masked': mine.isMasked\n      })\n      return (\n        <button className={className} onClick={()=>{\n          this.setState({isMasked: false});\n        }}>\n          {this.state.isMasked ? null: 'X'}\n        </button>\n      )\n    }*/\n\n  }]);\n\n  return Cell;\n}(React.Component);","map":{"version":3,"sources":["/Users/angelo.falci/Desktop/Projects/Corso React/Code/react-foundamentals/src/Cell/Cell.jsx"],"names":["React","classname","Cell","mine","props","className","isMasked","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,YAAP;AAEA,WAAaC,IAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAEU;AACN,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB,CADM,CAEN;;AACA,UAAME,SAAS,GAACJ,SAAS,CAAC,MAAD,EAAQ;AAC/B,qBAAaE,IAAI,CAACG;AADa,OAAR,CAAzB;AAGA,aACE;AAAQ,QAAA,SAAS,EAAED,SAAnB;AAA8B,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWD,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,IAAI,CAACG,QAAL,GAAgB,IAAhB,GAAsB,GADzB,CADF;AAKD;AACD;;;;;;;;;;;;;;;;;;;;;;;AAdF;;AAAA;AAAA,EAA0BN,KAAK,CAACO,SAAhC","sourcesContent":["import React from 'react'\nimport classname from 'classnames'\nimport './Cell.css'\n\nexport class Cell extends React.Component {\n\n  render(){\n    const mine = this.props.mine;\n    //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n    const className=classname('cell',{\n      'is-masked': mine.isMasked\n    })\n    return (\n      <button className={className} key={this.props.mine}>\n        {mine.isMasked ? null: 'X'}\n      </button>\n    )\n  }\n  /*\n    I want that Cell is \"stupid\", I put the login in the Game because Game knows the state of all cells\n  constructor(props){\n    super(props);\n    this.state ={\n      isMasked: props.mine.isMasked\n    }\n  }\n\n  render(){\n    const mine = this.props.mine;\n    //const className = `cell ${isMasked ? 'is-masked' : ''}`;\n    const className=classname('cell',{\n      'is-masked': mine.isMasked\n    })\n    return (\n      <button className={className} onClick={()=>{\n        this.setState({isMasked: false});\n      }}>\n        {this.state.isMasked ? null: 'X'}\n      </button>\n    )\n  }*/\n}"]},"metadata":{},"sourceType":"module"}